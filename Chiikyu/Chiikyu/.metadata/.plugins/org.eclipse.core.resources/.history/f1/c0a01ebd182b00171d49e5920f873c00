import java.awt.Color;
import java.awt.Dimension;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;

import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;


public class scoreBoard {
	private JFrame scoreBoardFrame =new JFrame();
	private JPanel scoreBoardPanel =new JPanel();
	private DefaultListModel<String> listModel=new DefaultListModel<String>();
	private JList<String> scoreList=new JList<String>();
	private JScrollPane listScrollPane=new JScrollPane(scoreList);
	private File filePointer=new File("score.dat");
	//private FileReader fileReader=new FileReader("score.dat");---------------------ENDS HERE
	private class pointNode{
		int score;
		String name;
		Date time;
	}
	private boolean judge(pointNode a,pointNode b){
		if (a.score<b.score)
			return false;
		if (a.score==b.score&&a.time.compareTo(b.time)>0)
			return false;
		return true;
	}
	public void showScore() throws IOException
	{
		int counter=0;
		FileReader fileReader=new FileReader(filePointer.getName());
		Scanner scan=new Scanner(fileReader);
		ArrayList<pointNode> scoreList = new ArrayList<pointNode>();
		while(scan.hasNext())
		{
			pointNode temp=new pointNode();
			temp.score=scan.nextInt();
			temp.name=scan.next();
			temp.time.setTime(scan.nextLong());
			scoreList.add(temp);
			++counter;
		}
		scan.close();
		clearData(false);
		filePointer.createNewFile();
	    FileWriter fileWritter = new FileWriter(filePointer.getName(),true);
        BufferedWriter bufferWritter = new BufferedWriter(fileWritter);
		for (int i=0;i<counter;++i)
			for (int j=1;j<counter;++j)
				if (judge(scoreList.get(j-1),scoreList.get(j)))
				{
					pointNode temp=scoreList.get(j);
					scoreList.set(j, scoreList.get(j-1));
					scoreList.set(j-1, temp);
				}
		for (int i=0;i<Math.min(10, counter);++i)
		{
			bufferWritter.write(scoreList.get(i).score+" "+scoreList.get(i).name+"\r\n");
			listModel.addElement((i+1)+"   "+scoreList.get(i).score+"   "+scoreList.get(i).name);
		}
		bufferWritter.close();
	}
	
	public void addScore(int score,String name,Date time) throws IOException{
		if(!filePointer.exists())
			filePointer.createNewFile();
	    FileWriter fileWritter = new FileWriter(filePointer.getName(),true);
        BufferedWriter bufferWritter = new BufferedWriter(fileWritter);
        bufferWritter.write(score+" "+name+(long)time.getTime()+"\r\n");
        bufferWritter.close();
	}
	
	public boolean clearData(boolean showInfo) throws IOException{
		if (showInfo)
		{
			if (JOptionPane.showConfirmDialog(null, "Are you sure you want to clear the score board?", "Info",JOptionPane.YES_NO_OPTION)==0)
			{
				if (filePointer.delete())
				{
					JOptionPane.showMessageDialog(null, "Success!", "Info",JOptionPane.INFORMATION_MESSAGE);  
					return true;
				}
				else
				{
					JOptionPane.showMessageDialog(null, "Failed.", "Info",JOptionPane.WARNING_MESSAGE);  
					return false;
				}
			}
			else
				return false;
		}
		else
		{
			if (!filePointer.delete())
			{
				JOptionPane.showMessageDialog(null, "Failed clearing data.", "Info",JOptionPane.WARNING_MESSAGE);  
				return false;
			}
			else
				return true;
		}
	}
	public void setSize(){

		listScrollPane.setPreferredSize(new Dimension(200,220));
		scoreList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		scoreList.setModel(listModel);
		//listModel.addElement("1  100  Chiikyu");
		
	}
	
	public void setPanel(){
		scoreBoardPanel.setBackground(new Color(240,240,240));
		scoreBoardPanel.setPreferredSize(new Dimension(220,250));
		scoreBoardPanel.add(listScrollPane);
	}
	
	public void setFrame(){
		scoreBoardFrame.setTitle("Scoreboard");
		//scoreBoardFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		scoreBoardFrame.getContentPane().add(scoreBoardPanel);
		scoreBoardFrame.pack();
		scoreBoardFrame.setVisible(true);
		scoreBoardFrame.setLocationRelativeTo(null); 
	}
	public void setScore(){
		if  (!filePointer.exists())
		    filePointer.mkdir();
		
	}
	
	public void set() throws IOException{
		setSize();
		setPanel();
		setFrame();
		clearData(false);
		Date date=new Date();
		addScore(20,"Chiikyu",date);
		addScore(30,"Chiikyu",date);
		addScore(40,"Chiikyu",date);
		addScore(20,"Chiikyu",date);
		addScore(40,"Chiikyu",date);
		addScore(30,"Chiikyu",date);
		addScore(40,"Chiikyu",date);
		addScore(30,"Chiikyu",date);
		addScore(40,"Chiikyu",date);
		addScore(50,"Chiikyu",date);
		addScore(40,"Chiikyu",date);
		showScore();
	}
	
}
